if has('nvim')
    " Neovim specific commands
	set t_8f=[38;2;%lu;%lu;%lum
	set t_8b=[48;2;%lu;%lu;%lum
	set termguicolors
	colorscheme cwcolors
	syntax enable
	" Set tag file if REPOBASE is set. This assumes you set the environment
	" variable REPOBASE to reflect the base directory of your current project
	" and generated your ctags file as $REPOBASE-objdir/tags.
	if $REPOBASE != ""
		set tags=$REPOBASE-objdir/tags
	endif

	" Bind <F10> to a function that shows the syntax highlighting group under the cursor.
	map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") .
	\       '> trans<' . synIDattr(synID(line("."),col("."),0),"name") .
	\       "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

	" Highlight trailing spaces.
	let c_space_errors=1
	" Don't highlight the Next match while typing a regular expression search.
	set noincsearch
else
    " Standard vim specific commands
    " Use the Solarized Dark theme
	set background=dark
	colorscheme solarized
	let g:solarized_termtrans=1
	" Allow cursor keys in insert mode
	set esckeys
	" Enable syntax highlighting
	syntax on

endif

" Make Vim more useful
set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
" Don‚Äôt add empty newlines at the end of files
set binary
set noeol
" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Don‚Äôt create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Enable line numbers
set number

" Highlight current line
set cursorline
" Make tabs as wide as two spaces
set tabstop=2
" Show ‚Äúinvisible‚Äù characters
set lcs=tab:‚ñ∏\ ,trail:¬∑,eol:¬¨,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don‚Äôt reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don‚Äôt show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it‚Äôs being typed
set showcmd
" Use relative line numbers
if exists("&relativenumber")
	set relativenumber
	au BufReadPost * set relativenumber
endif
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	" Treat .md files as Markdown
	autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif
